FROM registry.access.redhat.com/ubi9/openjdk-11:latest as builder

USER 0

# Original code pulled in a transitive dependency that made it very hard to use sprint-boot.

#RUN microdnf install -y git \
#    && mkdir -p /src/ \
#    && cd /src/ \
#    && git clone https://github.com/microservices-demo/carts

# Decided to split the steps here to avoid rebuilding/cloning needlessly.
#RUN cd /src/carts && mvn clean package -DskipTests

# Workaround: To update the code and pull out the jar we're using crane to grab the existing jar

RUN microdnf install -y tar gzip \
    && curl -L -o o.tgz "https://github.com/google/go-containerregistry/releases/download/v0.15.2/go-containerregistry_Linux_$(arch | sed 's|aarch64|arm64|g').tar.gz" \
    && tar xvf o.tgz \
    && ./crane export weaveworksdemos/carts:0.4.8 x.tar \
    && tar xvf x.tar usr/src/app/app.jar \
    && mv usr/src/app/app.jar app.jar

USER 1001

FROM registry.access.redhat.com/ubi9/openjdk-11-runtime:latest

ENV	SERVICE_USER=myuser \
	SERVICE_UID=10001 \
	SERVICE_GROUP=mygroup \
	SERVICE_GID=10001

USER 0
RUN microdnf update -y \
    && microdnf install -y nc tzdata openssl ca-certificates fontconfig glibc-langpack-en gzip tar findutils shadow-utils \
    && groupadd -r -g ${SERVICE_GID} ${SERVICE_GROUP} \
    && useradd -r -u ${SERVICE_UID} -g ${SERVICE_GROUP} -m -d /home/${SERVICE_USER} -s /sbin/nologin ${SERVICE_USER}

WORKDIR /
EXPOSE 8080

RUN mkdir -p /opt
COPY --from=builder /home/default/app.jar /opt/app.jar
RUN	chown -R ${SERVICE_USER}:${SERVICE_GROUP} /opt/app.jar

# Override a jaxb error as it's not included in JDK 11
RUN mkdir -p /opt/lib \
    && curl -L -o /opt/lib/jaxb-api-2.3.1.jar https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar \
    && curl -L -o /opt/lib/jaxb-runtime-3.0.1.redhat-00001.jar https://maven.repository.redhat.com/ga/org/glassfish/jaxb/jaxb-runtime/3.0.1.redhat-00001/jaxb-runtime-3.0.1.redhat-00001.jar \
    && chmod 755 /opt/lib/*.jar

USER ${SERVICE_USER}

ENTRYPOINT ["java","-Djava.security.egd=file:/dev/urandom", "-jar","/opt/app.jar", "--port=8080"]
